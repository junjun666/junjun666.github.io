<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-30T03:31:50.068Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git高级知识点(1)</title>
    <link href="http://yoursite.com/2019/01/28/git%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/01/28/git高级知识点/</id>
    <published>2019-01-28T09:34:10.000Z</published>
    <updated>2019-01-30T03:31:50.068Z</updated>
    
    <content type="html"><![CDATA[<p>对于git这一款源代码管理工具，在这里对git基础命令不再做详细的总结了。(总的来说就是本地上分为三个区：工作区、暂存区和仓库区)，这里就是对一些稍微复杂一点的知识点做一点总结。</p><h3 id="1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"><a href="#1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？" class="headerlink" title="1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"></a>1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)复刻（fork） 是对存储仓库（repository）进行的远程的、服务器端的拷贝，从源头上就有所区别。复刻实际上不是 Git 的范畴。它更像是个政治/社会概念。</span><br><span class="line">2)克隆（<span class="built_in">clone</span>） 不是复刻，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。</span><br><span class="line">3)分支（branch） 是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？"><a href="#2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？" class="headerlink" title="2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？"></a>2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Git工作区的跟目录下创建一个特殊的.gitignore文件，然后把忽略的文件名编辑进去，Git就会自动忽略这些文件。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突"><a href="#3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突" class="headerlink" title="3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?"></a>3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)在main_dev上通过git <span class="built_in">log</span>，查询到&lt;commit id&gt;</span><br><span class="line">2)使用git checkout main_zh_test 切换分支</span><br><span class="line">3)使用git cherry-pick &lt;commit id&gt; 将对bug的修改批量移植到该分支上</span><br><span class="line">4)git commit 提交到本地</span><br><span class="line">5)git push 推送到远程仓库</span><br></pre></td></tr></table></figure><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于git这一款源代码管理工具，在这里对git基础命令不再做详细的总结了。(总的来说就是本地上分为三个区：工作区、暂存区和仓库区)，这里就是对一些稍微复杂一点的知识点做一点总结。&lt;/p&gt;
&lt;h3 id=&quot;1-Git中复刻（fork）、分支（branch）和克隆（clone）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-27T03:22:21.234Z</published>
    <updated>2019-01-27T03:22:21.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
