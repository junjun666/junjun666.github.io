<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-30T14:22:08.424Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git高级知识点</title>
    <link href="http://yoursite.com/2019/01/28/git%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/01/28/git高级知识点/</id>
    <published>2019-01-28T09:34:10.000Z</published>
    <updated>2019-01-30T14:22:08.424Z</updated>
    
    <content type="html"><![CDATA[<p>在这里首先列举一些git用法的基础命令:<br>1.git init(创建仓库)<br>2.git status(查看仓库的状态)<br>3.git diff 文件名 (这次相较上次修改了哪些内容)<br>4.git add 文件名 (将添加的文件放到暂存区中)<br>5.git commit -m ‘内容’(将暂存区内容提交到仓库区中)<br>6.git push [地址] master 提交代码到github上。<br>7.git clone git地址(将远程仓库的代码克隆到本地)<br>8.git branch 查看当前分支<br>9.git checkout 切换分支<br>10.git branch -d [branch-name] 删除分支<br>11.git log 查看日志<br>   git log –oneline 看到简洁版的日志<br>12.git reset 版本回退<br>对于git这一款源代码管理工具，在这里对git基础命令不再做详细的总结了。(总的来说就是本地上分为三个区：工作区、暂存区和仓库区)，这里就是对一些稍微复杂一点的知识点做一点总结。</p><h3 id="1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"><a href="#1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？" class="headerlink" title="1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"></a>1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)复刻（fork） 是对存储仓库（repository）进行的远程的、服务器端的拷贝，从源头上就有所区别。复刻实际上不是 Git 的范畴。它更像是个政治/社会概念。</span><br><span class="line">2)克隆（<span class="built_in">clone</span>） 不是复刻，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。</span><br><span class="line">3)分支（branch） 是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？"><a href="#2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？" class="headerlink" title="2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？"></a>2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Git工作区的跟目录下创建一个特殊的.gitignore文件，然后把忽略的文件名编辑进去，Git就会自动忽略这些文件。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突"><a href="#3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突" class="headerlink" title="3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?"></a>3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)在main_dev上通过git <span class="built_in">log</span>，查询到&lt;commit id&gt;</span><br><span class="line">2)使用git checkout main_zh_test 切换分支</span><br><span class="line">3)使用git cherry-pick &lt;commit id&gt; 将对bug的修改批量移植到该分支上</span><br><span class="line">4)git commit 提交到本地</span><br><span class="line">5)git push 推送到远程仓库</span><br></pre></td></tr></table></figure><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br><br></p><h3 id="4-如何从-git-中删除文件，而不将其从文件系统中删除？"><a href="#4-如何从-git-中删除文件，而不将其从文件系统中删除？" class="headerlink" title="4:如何从 git 中删除文件，而不将其从文件系统中删除？"></a>4:如何从 git 中删除文件，而不将其从文件系统中删除？</h3><hr><p>如果你在 git add 过程中误操作，你最终会添加不想提交的文件。但是，git rm 则会把你的文件从你暂存区（索引）和文件系统（工作树）中删除，这可能不是你想要的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)git reset filename          </span><br><span class="line">2)<span class="built_in">echo</span> filename &gt;&gt; .gitingore</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="5-git和svn的优缺点。"><a href="#5-git和svn的优缺点。" class="headerlink" title="5:git和svn的优缺点。"></a>5:git和svn的优缺点。</h3><hr><p>1．SVN优缺点<br>优点：<br>1、 管理方便，逻辑明确，符合一般人思维习惯。<br>2、 易于管理，集中式服务器更能保证安全性。<br>3、 代码一致性非常高。<br>4、 适合开发人数不多的项目开发。<br>缺点：<br>1、 服务器压力太大，数据库容量暴增。<br>2、 如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。<br>3、 不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</p><p>2．Git优缺点<br>优点：<br>1、适合分布式开发，强调个体。<br>2、公共服务器压力和数据量都不会太大。<br>3、速度快、灵活。<br>4、任意两个开发者之间可以很容易的解决冲突。<br>5、离线工作。<br>缺点：<br>1、学习周期相对而言比较长。<br>2、不符合常规思维。<br>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。<br><br></p><h3 id="6-说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。"><a href="#6-说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。" class="headerlink" title="6:说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。"></a>6:说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。</h3><hr><p>Git branch name     创建名字为name的branch</p><p>Git checkout xxx_dev    切换到名字为xxx_dev的分支</p><p>Git pull    从远程分支拉取代码到本地分支</p><p>Git checkout -b main_furture_xxx    创建并切换到main_furture_xxx</p><p>Git push origin main_furture_xxx    执行推送的操作，完成本地分支向远程分支的同步<br><br></p><h3 id="7-git提交代码时候写错commit信息后，如何重新设置commit信息？"><a href="#7-git提交代码时候写错commit信息后，如何重新设置commit信息？" class="headerlink" title="7:git提交代码时候写错commit信息后，如何重新设置commit信息？"></a>7:git提交代码时候写错commit信息后，如何重新设置commit信息？</h3><hr><p>可以通过Git commit –amend 来对本次commit进行修改。<br><br></p><h3 id="8-如何查看文件的提交历史和分支的提交历史。"><a href="#8-如何查看文件的提交历史和分支的提交历史。" class="headerlink" title="8:如何查看文件的提交历史和分支的提交历史。"></a>8:如何查看文件的提交历史和分支的提交历史。</h3><hr><p>使用git log查看文件提交历史</p><p>Git log filename</p><p>使用git log查看分支提交历史</p><p>Git log branch file</p><p>总的来说就是git log [文件名]来查看<br><br></p><h3 id="9-“git-pull”和“git-fetch”之间有什么区别？"><a href="#9-“git-pull”和“git-fetch”之间有什么区别？" class="headerlink" title="9:“git pull”和“git fetch”之间有什么区别？"></a>9:“git pull”和“git fetch”之间有什么区别？</h3><hr><p>简单来说，git pull 是 git fetch + git merge。</p><p>当你使用 pull，Git 会试着自动为你完成工作。它是上下文（工作环境）敏感的，所以 Git 会把所有拉取的提交合并到你当前处理的分支中。pull 则是 自动合并提交而没有让你复查的过程。如果你没有细心管理你的分支，你可能会频繁遇到冲突。<br>当你 fetch，Git 会收集目标分支中的所有不存在的提交，并将这些提交存储到本地仓库中。但Git 不会把这些提交合并到当前分支中。这种处理逻辑在当你需要保持仓库更新，在更新文件时又希望处理可能中断的事情时，这将非常实用。而将提交合并到主分支中，则该使用 merge。<br><br></p><h3 id="10-重点-Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布"><a href="#10-重点-Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布" class="headerlink" title="10: [重点]:Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布"></a>10: [重点]:Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布</h3><hr><p>详细知识点: <a href="https://blog.csdn.net/happydeer/article/details/17618935" target="_blank" rel="noopener">Reading</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里首先列举一些git用法的基础命令:&lt;br&gt;1.git init(创建仓库)&lt;br&gt;2.git status(查看仓库的状态)&lt;br&gt;3.git diff 文件名 (这次相较上次修改了哪些内容)&lt;br&gt;4.git add 文件名 (将添加的文件放到暂存区中)&lt;br&gt;5.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-27T03:22:21.234Z</published>
    <updated>2019-01-27T03:22:21.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
