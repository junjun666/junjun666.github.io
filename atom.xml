<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-27T04:40:06.431Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs-express-中间件关于参数处理</title>
    <link href="http://yoursite.com/2019/05/27/express-%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/27/express-中间件/</id>
    <published>2019-05-27T03:57:03.000Z</published>
    <updated>2019-05-27T04:40:06.431Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。"><a href="#关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。" class="headerlink" title="关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。"></a>关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。</h4><p>后台部分(根据前端发来的type类型不同来处理)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const app = express();</span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">//挂载内置中间件</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line">//挂载参数处理中间件(post)</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;));</span><br><span class="line">//处理json格式的参数</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">//处理get提交参数</span><br><span class="line">app.get(&apos;/login&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    let data = req.query;</span><br><span class="line">    console.log(data);</span><br><span class="line">    res.send(&apos;get data&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">//处理post提交参数</span><br><span class="line">app.post(&apos;/login&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    let data = req.body;</span><br><span class="line">    if(data.username == &apos;admin&apos; $$ data.password == &apos;123&apos;)&#123;</span><br><span class="line">        res.send(&apos;success&apos;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.send(&apos;failure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//处理put提交参数</span><br><span class="line">app.put(&apos;/login&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    res.end(&apos;put data&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">//处理delete提交参数</span><br><span class="line">app.delete(&apos;/login&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    res.end(&apos;delete data&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&#123;</span><br><span class="line">    console.log(&apos;running...&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>前端部分(在public文件夹下)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-3.4.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(&apos;btn&apos;).click(function()&#123;</span><br><span class="line">                var obj = &#123;</span><br><span class="line">                    username: $(&apos;#username&apos;).val(),</span><br><span class="line">                    password: $(&apos;#password&apos;).val()</span><br><span class="line">                &#125;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type : &apos;post&apos;,</span><br><span class="line">                    url: &apos;http://localhost:3000/login&apos;,</span><br><span class="line">                    contentType: &apos;application/json&apos;,</span><br><span class="line">                    dataType:&apos;text&apos;,</span><br><span class="line">                    data:JSON.stringify(obj),</span><br><span class="line">                    success:function(data)&#123;</span><br><span class="line">                        console.log(data)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;http://localhost:3000/login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码： &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;&lt;/br&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。&quot;&gt;&lt;a href=&quot;#关于前端发送请求，后台根据请求方式不同，做出不同的处理的小demo。&quot; class=&quot;headerlink&quot; title=&quot;关于前端发送请求，后台根据请求方式不同，做出不同
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://yoursite.com/2019/05/24/webpack/"/>
    <id>http://yoursite.com/2019/05/24/webpack/</id>
    <published>2019-05-24T14:59:43.000Z</published>
    <updated>2019-05-25T03:16:58.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是webpack"><a href="#1-什么是webpack" class="headerlink" title="1:什么是webpack?"></a>1:什么是webpack?</h3><p>它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><h3 id="2-为什么要用webpack"><a href="#2-为什么要用webpack" class="headerlink" title="2:为什么要用webpack?"></a>2:为什么要用webpack?</h3><p>1)模块化，让我们可以把复杂的程序细化为小的文件;<br>2)类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能转换为JavaScript文件使浏览器可以识别；<br>3)scss，less等CSS预处理器<br>………<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p><h3 id="3-webpack相对于其他前端自动化构建工具的优势所在？"><a href="#3-webpack相对于其他前端自动化构建工具的优势所在？" class="headerlink" title="3:webpack相对于其他前端自动化构建工具的优势所在？"></a>3:webpack相对于其他前端自动化构建工具的优势所在？</h3><h4 id="优点：模块化"><a href="#优点：模块化" class="headerlink" title="优点：模块化"></a>优点：模块化</h4><p>在webpack看来一切都是模块！这就是它不可不说的优点，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p><h3 id="4-1-webpack的安装"><a href="#4-1-webpack的安装" class="headerlink" title="4.1:webpack的安装"></a>4.1:webpack的安装</h3><p>在开始之前，请确保安装了 Node.js 的最新版本<br>1)要安装最新版本或特定版本，请运行以下命令之一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure></p><p>2)如果你使用 webpack 4+ 版本，你还需要安装 CLI。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure></p><p>3)对于大多数项目，我们建议本地安装。这可以使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目。通常，webpack 通过运行一个或多个 npm scripts，会在本地 node_modules 目录中查找安装的 webpack：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack --config webpack.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4)总结来说3个基础安装步骤<br>mkdir webpack-demo &amp;&amp; cd webpack-demo<br>npm init -y<br>npm install webpack webpack-cli –save-dev</p><h3 id="4-2-webpack的简单入门"><a href="#4-2-webpack的简单入门" class="headerlink" title="4.2:webpack的简单入门"></a>4.2:webpack的简单入门</h3><p>配置文件webpack.config.js<br>1)入口entry和出口output<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./path/to/my/entry/file.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;my-first-webpack.bundle.js&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2)loader加载器<br>原理:loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><p>1:首先安装对应的loader<br>告诉webpack加载css文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br></pre></td></tr></table></figure></p><p>将 TypeScript 转为 JavaScript<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev ts-loader</span><br></pre></td></tr></table></figure></p><p>2:在webpack.config.js中进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; test: /\.css$/, use: &apos;css-loader&apos; &#125;,</span><br><span class="line">      &#123; test: /\.ts$/, use: &apos;ts-loader&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>3)插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); //通过 npm 安装</span><br><span class="line">const webpack = require(&apos;webpack&apos;); //访问内置的插件</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">  entry: &apos;./path/to/my/entry/file.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;my-first-webpack.bundle.js&apos;,</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(js|jsx)$/,</span><br><span class="line">        use: &apos;babel-loader&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;template: &apos;./src/index.html&apos;&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure></p><h3 id="5-webpack支持的模块？"><a href="#5-webpack支持的模块？" class="headerlink" title="5:webpack支持的模块？"></a>5:webpack支持的模块？</h3><p>webpack 通过 loader 可以支持各种语言和预处理器编写模块。loader 描述了 webpack 如何处理 非 JavaScript(non-JavaScript) _模块_，并且在 bundle 中引入这些依赖。 webpack 社区已经为各种流行语言和语言处理器构建了 loader，包括：</p><p>1)CoffeeScript<br>2)TypeScript<br>3)ESNext (Babel)<br>4)Sass<br>5)Less<br>6)Stylus<br>总的来说，webpack 提供了可定制的、强大和丰富的 API，允许任何技术栈使用 webpack，保持了在你的开发、测试和生成流程中无侵入性(non-opinionated)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-什么是webpack&quot;&gt;&lt;a href=&quot;#1-什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;1:什么是webpack?&quot;&gt;&lt;/a&gt;1:什么是webpack?&lt;/h3&gt;&lt;p&gt;它做的事情是，分析你的项目结构，找到JavaScript
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>轻量级js框架--zepto.js</title>
    <link href="http://yoursite.com/2019/05/18/zepto/"/>
    <id>http://yoursite.com/2019/05/18/zepto/</id>
    <published>2019-05-18T07:34:00.000Z</published>
    <updated>2019-05-24T14:52:50.078Z</updated>
    
    <content type="html"><![CDATA[<p>之所以说Zepto和JQuery超级像，是因为他们的用法一样，除了有那么一点不同之外，基本没有任何区别，如果你会用JQuery，那么，你就会用Zepto。<br>但是相比较之下，Zepto是比JQuery更加轻量级的一款JavaScript库，更加倾向于应用的开发。</p><p>zepto.js是简化的javascript库<br>zepto的API是参考jQuery的API</p><p>zepto中touch相关事件<br>touchstart<br>touchstart是手指刚触摸到元素时触发的事件<br>touchmove<br>touchmove是手指移动时触发的事件<br>touchend<br>当手指离开指定元素时触发</p><p>用法基本跟jQuery一致，直接上手使用即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之所以说Zepto和JQuery超级像，是因为他们的用法一样，除了有那么一点不同之外，基本没有任何区别，如果你会用JQuery，那么，你就会用Zepto。&lt;br&gt;但是相比较之下，Zepto是比JQuery更加轻量级的一款JavaScript库，更加倾向于应用的开发。&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gulp4 用法</title>
    <link href="http://yoursite.com/2019/05/17/gulp/"/>
    <id>http://yoursite.com/2019/05/17/gulp/</id>
    <published>2019-05-17T09:47:30.000Z</published>
    <updated>2019-05-17T11:37:22.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gulp是什么呢"><a href="#gulp是什么呢" class="headerlink" title="gulp是什么呢"></a>gulp是什么呢</h3><p>Gulp 是基于 NodeJS 的前端自动化构建工具，在项目开发过程中自动化地完成 html / css / js / image / sass / less 等文件的编译、合并、压缩、语法检查、浏览器自动刷新等重复性任务，在操作上使用了 NodeJS 中的 stream (流)，通过 pipe() 方法导入到指定的地方，将前一级的输出，作为后一级的输入，不再需要进行频繁的 IO 操作。</p><h3 id="使用gulp前的操作"><a href="#使用gulp前的操作" class="headerlink" title="使用gulp前的操作"></a>使用gulp前的操作</h3><p>首先一定基于nodejs下的，建立一个cnpm install gulp-cli -g建立全局的cli,安装cnpm install gulp –save-dev开发时依赖，可以下载运行时依赖如cnpm install jquery –save。</p><h3 id="先来一个代码gulp4的举例："><a href="#先来一个代码gulp4的举例：" class="headerlink" title="先来一个代码gulp4的举例："></a>先来一个代码gulp4的举例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(<span class="string">"gulp"</span>);</span><br><span class="line">var connect = require(<span class="string">"gulp-connect"</span>);</span><br><span class="line">var watch = require(<span class="string">"gulp-watch"</span>);</span><br><span class="line">var less = require(<span class="string">"gulp-less"</span>);</span><br><span class="line"></span><br><span class="line">//转移html到dist文件夹下</span><br><span class="line">gulp.task(<span class="string">"html"</span>,<span class="function"><span class="title">function</span></span>()&#123; </span><br><span class="line">    gulp.src(<span class="string">"./src/index.html"</span>)</span><br><span class="line">        // 重新加载浏览器，不需要手动刷新浏览器</span><br><span class="line">        .pipe(connect.reload())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">//监听任务，这样保存的话会直接同步保存到dist下。</span><br><span class="line">gulp.task(<span class="string">"watch"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    watch(<span class="string">"./src/index.html"</span>,gulp.series(<span class="string">'html'</span>))</span><br><span class="line">    watch(<span class="string">"./src/less/*.less"</span>,gulp.series(<span class="string">'less'</span>))</span><br><span class="line">    watch(<span class="string">"./src/js/*.js"</span>,gulp.series(<span class="string">'js'</span>));</span><br><span class="line">&#125;)</span><br><span class="line">//服务器开启任务</span><br><span class="line">gulp.task(<span class="string">"server"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    connect.server(&#123;   </span><br><span class="line">        root : <span class="string">'./dist'</span>,</span><br><span class="line">        // 热启操作</span><br><span class="line">        livereload : <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">//把less转换成css</span><br><span class="line">gulp.task(<span class="string">"less"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gulp.src(<span class="string">"./src/less/*.less"</span>)</span><br><span class="line">        .pipe(connect.reload())</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist/css"</span>));</span><br><span class="line">&#125;)</span><br><span class="line">//把src的js文件夹放到dist文件夹下</span><br><span class="line">gulp.task(<span class="string">"js"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gulp.src(<span class="string">"./src/js/*.js"</span>)</span><br><span class="line">        .pipe(connect.reload())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist/js"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">'default'</span>,gulp.series(gulp.parallel(<span class="string">'html'</span>,<span class="string">'watch'</span>,<span class="string">'server'</span>,<span class="string">'less'</span>,<span class="string">'js'</span>)));</span><br></pre></td></tr></table></figure><h3 id="gulp4相对于gulp3的最大不同之处"><a href="#gulp4相对于gulp3的最大不同之处" class="headerlink" title="gulp4相对于gulp3的最大不同之处"></a>gulp4相对于gulp3的最大不同之处</h3><p>Gulp 4最大的变化就是你不能像以前那样传递一个依赖任务列表。不要用Gulp3的方式指定依赖任务，你需要使用gulp.series和gulp.parallel，因为gulp任务现在只有两个参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.series：按照顺序执行</span><br><span class="line">gulp.paralle：可以并行计算</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gulp是什么呢&quot;&gt;&lt;a href=&quot;#gulp是什么呢&quot; class=&quot;headerlink&quot; title=&quot;gulp是什么呢&quot;&gt;&lt;/a&gt;gulp是什么呢&lt;/h3&gt;&lt;p&gt;Gulp 是基于 NodeJS 的前端自动化构建工具，在项目开发过程中自动化地完成 html
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http知识点小总结</title>
    <link href="http://yoursite.com/2019/02/14/http/"/>
    <id>http://yoursite.com/2019/02/14/http/</id>
    <published>2019-02-14T02:20:20.000Z</published>
    <updated>2019-02-14T02:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-浏览器输入url按回车背后经历了哪些？"><a href="#1-浏览器输入url按回车背后经历了哪些？" class="headerlink" title="1)浏览器输入url按回车背后经历了哪些？"></a>1)浏览器输入url按回车背后经历了哪些？</h3><p>1、首先，在浏览器地址栏中输入url，先解析url，检测url地址是否合法<br>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。<br>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；<br>操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录(保存最近的DNS查询缓存)；<br>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；<br>ISP缓存：若上述均失败，继续向ISP搜索。<br>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。<br>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。<br>5、握手成功后，浏览器向服务器发送http请求，请求数据包。<br>6、服务器处理收到的请求，将数据返回至浏览器<br>7、浏览器收到HTTP响应<br>8、浏览器解码响应，如果响应可以缓存，则存入缓存。<br>9、 浏览器发送请求获取嵌入在HTML中的资源（html，css，javascript，图片，音乐······），或者可以说是浏览器解析HTML代码，对于未知类型，会弹出对话框。<br>10、 浏览器发送异步请求。<br>11、页面全部渲染结束。</p><h3 id="2-http和https区别"><a href="#2-http和https区别" class="headerlink" title="2)http和https区别"></a>2)http和https区别</h3><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p><p>HTTPS和HTTP的区别主要如下：</p><p>总的来说： HTTPS=SSL+HTTP</p><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>（这个只是默认端口不一样，实际上端口是可以改的）</p><p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h3 id="3-什么是Http协议无状态协议-怎么解决Http协议无状态协议"><a href="#3-什么是Http协议无状态协议-怎么解决Http协议无状态协议" class="headerlink" title="3)什么是Http协议无状态协议?怎么解决Http协议无状态协议?"></a>3)什么是Http协议无状态协议?怎么解决Http协议无状态协议?</h3><p>(1)、无状态协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息<br>(2)、无状态协议解决办法： 通过1、Cookie 2、通过Session会话保存。</p><h3 id="4-Http协议首部字段"><a href="#4-Http协议首部字段" class="headerlink" title="4)Http协议首部字段"></a>4)Http协议首部字段</h3><p>a、通用首部字段（请求报文与响应报文都会使用的首部字段）<br>Date：创建报文时间<br>Connection：连接的管理<br>Cache-Control：缓存的控制<br>Transfer-Encoding：报文主体的传输编码方式<br>b、请求专用首部字段（请求报文会使用的首部字段）<br>Host + 地址：客户端告诉服务器此次请求地址<br>Accept：可处理的媒体类型(告诉服务器自己可以接收的响应消息类型)<br>Accept-Charset：可接收的字符集<br>Accept-Encoding：可接受的内容编码<br>Accept-Language：可接受的自然语言<br>c、响应专用首部字段（响应报文会使用的首部字段）<br>Accept-Ranges：可接受的字节范围<br>Location：令客户端重新定向到的URI<br>Server：HTTP服务器的安装信息<br>d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）<br>Allow：资源可支持的HTTP方法<br>Content-Type：实体主类的类型<br>Content-Encoding：实体主体适用的编码方式<br>Content-Language：实体主体的自然语言<br>Content-Length：实体主体的的字节数<br>Content-Range：实体主体的位置范围，一般用于发出部分请求时使用</p><h3 id="5-Cookie-localStorage介绍-以及localStorage的优缺点。"><a href="#5-Cookie-localStorage介绍-以及localStorage的优缺点。" class="headerlink" title="5)Cookie,localStorage介绍,以及localStorage的优缺点。"></a>5)Cookie,localStorage介绍,以及localStorage的优缺点。</h3><p>Cookie是可以覆盖的，如果重复写入同名的Cookie，那么将会覆盖之前的Cookie<br>如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。</p><p>localStorage存储在一个对象中. 有键值对<br>什么是localStorage,在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。</p><p>localStorage的优势<br>1、localStorage拓展了cookie的4K限制<br>2、localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的<br>localStorage的局限<br>1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性<br>2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换<br>3、localStorage在浏览器的隐私模式下面是不可读取的<br>4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡<br>5、localStorage不能被爬虫抓取到<br>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空</p><h3 id="6-Http优化和Http协议有哪些特征"><a href="#6-Http优化和Http协议有哪些特征" class="headerlink" title="6)Http优化和Http协议有哪些特征?"></a>6)Http优化和Http协议有哪些特征?</h3><p>(1)利用负载均衡优化和加速HTTP应用<br>利用HTTP Cache来优化网站<br>(2)1、支持客户/服务器模式；2、简单快速；3、灵活；4、无连接；5、无状态；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-浏览器输入url按回车背后经历了哪些？&quot;&gt;&lt;a href=&quot;#1-浏览器输入url按回车背后经历了哪些？&quot; class=&quot;headerlink&quot; title=&quot;1)浏览器输入url按回车背后经历了哪些？&quot;&gt;&lt;/a&gt;1)浏览器输入url按回车背后经历了哪些？&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php基础语法及访问数据库</title>
    <link href="http://yoursite.com/2019/02/06/php/"/>
    <id>http://yoursite.com/2019/02/06/php/</id>
    <published>2019-02-06T13:23:27.000Z</published>
    <updated>2019-02-06T15:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进入php操作"><a href="#进入php操作" class="headerlink" title="进入php操作"></a>进入php操作</h3><p>1:打开xampp软件，执行Apache中的start，cmd命令行输入ipconfig，找到IPV4地址加上冒号默认端口地址。<br>2:找到本地下例如C:\xampp\htdocs文件夹下，在下面操作php</p><h3 id="总结一下php用到的基础语法语句"><a href="#总结一下php用到的基础语法语句" class="headerlink" title="总结一下php用到的基础语法语句:"></a>总结一下php用到的基础语法语句:</h3><p>1:输出变量和用.连接变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0; <span class="variable">$i</span> &lt; 10; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="built_in">echo</span>(<span class="variable">$i</span>.<span class="variable">$msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>2:写入html文件的php代码，输出九九乘法表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span>=1;<span class="variable">$i</span>&lt;=9;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;tr&gt;'</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="variable">$j</span>=1;<span class="variable">$j</span>&lt;=<span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">'&lt;td&gt;'</span>.<span class="variable">$i</span>.<span class="string">'*'</span>.<span class="variable">$j</span>.<span class="string">'='</span>.(<span class="variable">$i</span>*<span class="variable">$j</span>).<span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>3:$变量名 = 值的问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$ename</span> = 10;</span><br><span class="line">    <span class="variable">$name</span> = <span class="string">"10"</span>;</span><br><span class="line">    <span class="variable">$n</span> = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$ename</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    var_dump(<span class="variable">$ename</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    var_dump(<span class="variable">$name</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    var_dump(<span class="variable">$n</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>4:访问数组里key和value的俩种方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$emp</span> = [<span class="string">'ename'</span>=&gt;<span class="string">'tom'</span>,<span class="string">'age'</span>=&gt;30];</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'姓名:'</span>.<span class="variable">$emp</span>[<span class="string">'ename'</span>].<span class="string">'年龄：'</span>.<span class="variable">$emp</span>[<span class="string">'age'</span>].<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"姓名:<span class="variable">$emp</span>[ename] 年龄：<span class="variable">$emp</span>[age]&lt;br&gt;"</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>5:foreach遍历数组。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">'eid'</span>=&gt;101,<span class="string">'name'</span>=&gt;<span class="string">'tom'</span>,<span class="string">'age'</span>=&gt;20,<span class="string">'ph'</span>=&gt;13512345678];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$arr</span>[<span class="string">'eid'</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">'addr'</span>] = <span class="string">'哈西'</span>;</span><br><span class="line">var_dump(<span class="variable">$arr</span>);</span><br><span class="line">foreach(<span class="variable">$arr</span> as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$k</span>:<span class="variable">$v</span>&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用php访问数据库"><a href="#使用php访问数据库" class="headerlink" title="使用php访问数据库"></a>使用php访问数据库</h3><p>1)连接数据库<br>mysqli_connect(host,user,pwd,dbname,port);<br>一般host为本机服务器地址:127.0.0.1<br>2)先提交sql数据的UTF8<br>$sql = “SET NAMES UTF8”;<br>mysqli_query($conn,$sql);<br>3）再提交sql数据<br>$sql = INSERT INTO…<br>$result = mysqli_query($conn,$sql);<br>4)查看返回结果<br>if($result){<br>    echo …;<br>}else{<br>    echo …;<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进入php操作&quot;&gt;&lt;a href=&quot;#进入php操作&quot; class=&quot;headerlink&quot; title=&quot;进入php操作&quot;&gt;&lt;/a&gt;进入php操作&lt;/h3&gt;&lt;p&gt;1:打开xampp软件，执行Apache中的start，cmd命令行输入ipconfig，找到IPV
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql知识点</title>
    <link href="http://yoursite.com/2019/01/31/mysql/"/>
    <id>http://yoursite.com/2019/01/31/mysql/</id>
    <published>2019-01-31T02:55:50.000Z</published>
    <updated>2019-02-06T14:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="展示数据库"><a href="#展示数据库" class="headerlink" title="展示数据库"></a>展示数据库</h4><p>SHOW DATABASE</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释:"></a>注释:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* */是多行注释</span><br><span class="line">#和--是单行注释</span><br></pre></td></tr></table></figure><h4 id="设置编码格式"><a href="#设置编码格式" class="headerlink" title="设置编码格式"></a>设置编码格式</h4><p>SET NAMES UTF8;</p><h4 id="删除一个数据库-如果存在"><a href="#删除一个数据库-如果存在" class="headerlink" title="删除一个数据库(如果存在)"></a>删除一个数据库(如果存在)</h4><p>DROP DATABASE IF EXISTS jd</p><h4 id="创建一个数据库指定其中保存数据的编码方式"><a href="#创建一个数据库指定其中保存数据的编码方式" class="headerlink" title="创建一个数据库指定其中保存数据的编码方式"></a>创建一个数据库指定其中保存数据的编码方式</h4><p>CREATE DATABASE jd CHARSET=UTF8</p><h4 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h4><p>USE jd</p><h4 id="创建表在数据库中"><a href="#创建表在数据库中" class="headerlink" title="创建表在数据库中"></a>创建表在数据库中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE product (</span><br><span class="line">    pid INT PRINARY KEY,</span><br><span class="line">    name VARCHAR(32),</span><br><span class="line">    price FLOAT(10,2),</span><br><span class="line">    pic VARCHAR(64)</span><br><span class="line">    birthday DATE,</span><br><span class="line">    isOnsale BOOLEAN</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO product VALUES&#123;</span><br><span class="line">    101,</span><br><span class="line">    <span class="string">'可口可乐600ml装'</span>,</span><br><span class="line">    3.5,</span><br><span class="line">    <span class="string">'img/p1.jpg'</span>,</span><br><span class="line">    <span class="string">'2018-12-24'</span>,</span><br><span class="line">    TRUE</span><br><span class="line">&#125;;</span><br><span class="line">INSERT INTO product VALUES&#123;</span><br><span class="line">    102,</span><br><span class="line">    <span class="string">'百事可乐600ml装'</span>,</span><br><span class="line">    3.5,</span><br><span class="line">    <span class="string">'img/p1.jpg'</span>,</span><br><span class="line">    <span class="string">'2018-12-24'</span>,</span><br><span class="line">    FALSE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)SELECT pid,name,price,pic,birthday,isOnsale FROM product;</span><br><span class="line">2)SELECT pid,name FROM product</span><br><span class="line">3)SELECT * FROM product</span><br><span class="line">4)SELECT * FROM product WHERE pid=101;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>1)DELETE FROM product;<br>2)DELETE FROM product WHERE pid=102;</p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>1)UPDATE product SET pid=103;<br>2)UPDATE product SET pid=103 WHERE pid=101;</p><h4 id="补充-sql分类-四类"><a href="#补充-sql分类-四类" class="headerlink" title="[补充]: sql分类 四类"></a>[补充]: sql分类 四类</h4><p>(1) DDL 数据定义语言 data define language<br>         CREATE DROP                     不常用:ALTER TRUNCATE<br>(2) DML 数据操作语言 data Manipulate language<br>        INSERT DELETE UPDATE<br>(3) DQL 数据查询语言 data query language<br>        SELECT<br>(4) DCL 数据控制语言 data control language<br>        GRANT授权        REVOKE 收权</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;展示数据库&quot;&gt;&lt;a href=&quot;#展示数据库&quot; class=&quot;headerlink&quot; title=&quot;展示数据库&quot;&gt;&lt;/a&gt;展示数据库&lt;/h4&gt;&lt;p&gt;SHOW DATABASE&lt;/p&gt;
&lt;h4 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git高级知识点</title>
    <link href="http://yoursite.com/2019/01/28/git%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/01/28/git高级知识点/</id>
    <published>2019-01-28T09:34:10.000Z</published>
    <updated>2019-01-30T15:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这里首先列举一些git用法的基础命令:<br>1.git init(创建仓库)<br>2.git status(查看仓库的状态)<br>3.git diff 文件名 (这次相较上次修改了哪些内容)<br>4.git add 文件名 (将添加的文件放到暂存区中)<br>5.git commit -m ‘内容’(将暂存区内容提交到仓库区中)<br>6.git push [地址] master 提交代码到github上。<br>7.git clone git地址(将远程仓库的代码克隆到本地)<br>8.git branch 查看当前分支<br>9.git checkout 切换分支<br>10.git branch -d [branch-name] 删除分支<br>11.git log 查看日志<br>   git log –oneline 看到简洁版的日志<br>12.git reset 版本回退<br>对于git这一款源代码管理工具，在这里对git基础命令不再做详细的总结了。(总的来说就是本地上分为三个区：工作区、暂存区和仓库区)，这里就是对一些稍微复杂一点的知识点做一点总结。</p><h3 id="1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"><a href="#1-Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？" class="headerlink" title="1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？"></a>1:Git中复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)复刻（fork） 是对存储仓库（repository）进行的远程的、服务器端的拷贝，从源头上就有所区别。复刻实际上不是 Git 的范畴。它更像是个政治/社会概念。</span><br><span class="line">2)克隆（<span class="built_in">clone</span>） 不是复刻，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。</span><br><span class="line">3)分支（branch） 是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？"><a href="#2-我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git-status时都让这些文件显示出来，我们该如何操作？" class="headerlink" title="2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？"></a>2:我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行git status时都让这些文件显示出来，我们该如何操作？</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Git工作区的跟目录下创建一个特殊的.gitignore文件，然后把忽略的文件名编辑进去，Git就会自动忽略这些文件。</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突"><a href="#3-假如你现在的分支为main-dev-并在这个分支上修复了一个bug-但是在main-zh-test分支也发现了同样的一个bug-如果不用copy代码的方式你如何把main-dev修复这个bug提交的代码合并到main-zh-test分支上-请贴出你的git操作指令和指令的含义-合并时没有冲突" class="headerlink" title="3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?"></a>3:假如你现在的分支为main_dev,并在这个分支上修复了一个bug,但是在main_zh_test分支也发现了同样的一个bug,如果不用copy代码的方式你如何把main_dev修复这个bug提交的代码合并到main_zh_test分支上,请贴出你的git操作指令和指令的含义(合并时没有冲突)?</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)在main_dev上通过git <span class="built_in">log</span>，查询到&lt;commit id&gt;</span><br><span class="line">2)使用git checkout main_zh_test 切换分支</span><br><span class="line">3)使用git cherry-pick &lt;commit id&gt; 将对bug的修改批量移植到该分支上</span><br><span class="line">4)git commit 提交到本地</span><br><span class="line">5)git push 推送到远程仓库</span><br></pre></td></tr></table></figure><p>[拓展git cherry-pick知识点]:git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作（操作的对象是commit）。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。<br><br></p><h3 id="4-如何从-git-中删除文件，而不将其从文件系统中删除？"><a href="#4-如何从-git-中删除文件，而不将其从文件系统中删除？" class="headerlink" title="4:如何从 git 中删除文件，而不将其从文件系统中删除？"></a>4:如何从 git 中删除文件，而不将其从文件系统中删除？</h3><hr><p>如果你在 git add 过程中误操作，你最终会添加不想提交的文件。但是，git rm 则会把你的文件从你暂存区（索引）和文件系统（工作树）中删除，这可能不是你想要的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)git reset filename          </span><br><span class="line">2)<span class="built_in">echo</span> filename &gt;&gt; .gitingore</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="5-git和svn的优缺点。"><a href="#5-git和svn的优缺点。" class="headerlink" title="5:git和svn的优缺点。"></a>5:git和svn的优缺点。</h3><hr><p>1．SVN优缺点<br>优点：<br>1、 管理方便，逻辑明确，符合一般人思维习惯。<br>2、 易于管理，集中式服务器更能保证安全性。<br>3、 代码一致性非常高。<br>4、 适合开发人数不多的项目开发。<br>缺点：<br>1、 服务器压力太大，数据库容量暴增。<br>2、 如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。<br>3、 不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</p><p>2．Git优缺点<br>优点：<br>1、适合分布式开发，强调个体。<br>2、公共服务器压力和数据量都不会太大。<br>3、速度快、灵活。<br>4、任意两个开发者之间可以很容易的解决冲突。<br>5、离线工作。<br>缺点：<br>1、学习周期相对而言比较长。<br>2、不符合常规思维。<br>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。<br><br></p><h3 id="6-说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。"><a href="#6-说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。" class="headerlink" title="6:说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。"></a>6:说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明。</h3><hr><p>Git branch name     创建名字为name的branch</p><p>Git checkout xxx_dev    切换到名字为xxx_dev的分支</p><p>Git pull    从远程分支拉取代码到本地分支</p><p>Git checkout -b main_furture_xxx    创建并切换到main_furture_xxx</p><p>Git push origin main_furture_xxx    执行推送的操作，完成本地分支向远程分支的同步<br><br></p><h3 id="7-git提交代码时候写错commit信息后，如何重新设置commit信息？"><a href="#7-git提交代码时候写错commit信息后，如何重新设置commit信息？" class="headerlink" title="7:git提交代码时候写错commit信息后，如何重新设置commit信息？"></a>7:git提交代码时候写错commit信息后，如何重新设置commit信息？</h3><hr><p>可以通过Git commit –amend 来对本次commit进行修改。<br><br></p><h3 id="8-如何查看文件的提交历史和分支的提交历史。"><a href="#8-如何查看文件的提交历史和分支的提交历史。" class="headerlink" title="8:如何查看文件的提交历史和分支的提交历史。"></a>8:如何查看文件的提交历史和分支的提交历史。</h3><hr><p>使用git log查看文件提交历史</p><p>Git log filename</p><p>使用git log查看分支提交历史</p><p>Git log branch file</p><p>总的来说就是git log [文件名]来查看<br><br></p><h3 id="9-“git-pull”和“git-fetch”之间有什么区别？"><a href="#9-“git-pull”和“git-fetch”之间有什么区别？" class="headerlink" title="9:“git pull”和“git fetch”之间有什么区别？"></a>9:“git pull”和“git fetch”之间有什么区别？</h3><hr><p>简单来说，git pull 是 git fetch + git merge。</p><p>当你使用 pull，Git 会试着自动为你完成工作。它是上下文（工作环境）敏感的，所以 Git 会把所有拉取的提交合并到你当前处理的分支中。pull 则是 自动合并提交而没有让你复查的过程。如果你没有细心管理你的分支，你可能会频繁遇到冲突。<br>当你 fetch，Git 会收集目标分支中的所有不存在的提交，并将这些提交存储到本地仓库中。但Git 不会把这些提交合并到当前分支中。这种处理逻辑在当你需要保持仓库更新，在更新文件时又希望处理可能中断的事情时，这将非常实用。而将提交合并到主分支中，则该使用 merge。<br><br></p><h3 id="10-重点-Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布"><a href="#10-重点-Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布" class="headerlink" title="10: [重点]:Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布"></a>10: [重点]:Gitflow工作流程和演示Gitflow流程如何被用来管理一次产品发布</h3><hr><p>详细知识点: <a href="https://blog.csdn.net/happydeer/article/details/17618935" target="_blank" rel="noopener">Reading</a><br><br></p><h3 id="11-什么时候应使用-“git-stash”？"><a href="#11-什么时候应使用-“git-stash”？" class="headerlink" title="11:什么时候应使用 “git stash”？"></a>11:什么时候应使用 “git stash”？</h3><hr><p>git stash 命令把你未提交的修改（已暂存（staged）和未暂存的（unstaged））保存以供后续使用，以后就可以从工作副本中进行还原。<br>我们可以使用暂存（stash）的一个地方是，如果我们发现在上次提交中忘记了某些内容，并且已经开始在同一分支中处理下一个提交了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assume the latest commit was already done</span></span><br><span class="line"><span class="comment"># start working on the next patch, and discovered I was missing something</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># stash away the current mess I made</span></span><br><span class="line">$ git stash save</span><br><span class="line"> </span><br><span class="line"><span class="comment"># some changes in the working dir</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># and now add them to the last commit:</span></span><br><span class="line">$ git add -u</span><br><span class="line">$ git commit --ammend</span><br><span class="line"> </span><br><span class="line"><span class="comment"># back to work!</span></span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="12-Git-中-HEAD、工作树和索引之间的区别？"><a href="#12-Git-中-HEAD、工作树和索引之间的区别？" class="headerlink" title="12:Git 中 HEAD、工作树和索引之间的区别？"></a>12:Git 中 HEAD、工作树和索引之间的区别？</h3><hr><p>1)该工作树/工作目录/工作空间是你看到和编辑的（源）文件的目录树。<br>2)该索引/中转区（staging area）是个在 /.git/index，单一的、庞大的二进制文件，该文件列出了当前分支中所有文件的 SHA1 检验和、时间戳和文件名，它不是个带有文件副本的目录。<br>3)HEAD是当前检出分支的最后一次提交的引用/指针。<br><br></p><h3 id="13-解释-Forking-工作流程的优点"><a href="#13-解释-Forking-工作流程的优点" class="headerlink" title="13:解释 Forking 工作流程的优点"></a>13:解释 Forking 工作流程的优点</h3><hr><p>Forking 工作流程 与其他流行的 Git 工作流程有着根本的区别。它不是用单个服务端仓库充当“中央”代码库，而是为每个开发者提供自己的服务端仓库。Forking 工作流程最常用于公共开源项目中。</p><p>Forking 工作流程的主要优点是可以汇集提交贡献，又无需每个开发者提交到一个中央仓库中，从而实现干净的项目历史记录。开发者可以推送（push）代码到自己的服务端仓库，而只有项目维护人员才能直接推送（push）代码到官方仓库中。</p><p>当开发者准备发布本地提交时，他们的提交会推送到自己的公共仓库中，而不是官方仓库。然后他们向主仓库提交请求拉取（pull request），这会告知项目维护人员有可以集成的更新。<br><br></p><h3 id="14-是么时候使用“git-rebase”代替“git-merge”？"><a href="#14-是么时候使用“git-rebase”代替“git-merge”？" class="headerlink" title="14:是么时候使用“git rebase”代替“git merge”？"></a>14:是么时候使用“git rebase”代替“git merge”？</h3><hr><p>详细知识点: <a href="https://www.cnblogs.com/yangmingyu/p/6904683.html" target="_blank" rel="noopener">Reading</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里首先列举一些git用法的基础命令:&lt;br&gt;1.git init(创建仓库)&lt;br&gt;2.git status(查看仓库的状态)&lt;br&gt;3.git diff 文件名 (这次相较上次修改了哪些内容)&lt;br&gt;4.git add 文件名 (将添加的文件放到暂存区中)&lt;br&gt;5.
      
    
    </summary>
    
    
  </entry>
  
</feed>
